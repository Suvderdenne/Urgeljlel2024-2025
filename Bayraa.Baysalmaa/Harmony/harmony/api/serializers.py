from rest_framework import serializers
from django.contrib.auth.password_validation import validate_password
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework_simplejwt.views import TokenObtainPairView
from django.contrib.auth import authenticate

from .models import *

# üë§ CustomUser Serializer
class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = '__all__'
        read_only_fields = ['avatar_base64']

    def validate_username(self, value):
        # Check if username is already taken
        if CustomUser.objects.filter(username=value).exists():
            raise serializers.ValidationError("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –∞–ª—å —Ö—ç–¥–∏–π–Ω—ç –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞.")
        return value


# üé® Category Serializer
class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = '__all__'
        read_only_fields = ['icon_base64']


# üë©‚Äçüé§ Artist Serializer
class ArtistSerializer(serializers.ModelSerializer):
    category = CategorySerializer(read_only=True)
    category_id = serializers.PrimaryKeyRelatedField(
        queryset=Category.objects.all(), source='category', write_only=True
    )

    class Meta:
        model = Artist
        fields = ['id', 'name', 'bio', 'category', 'category_id', 'profile_picture', 'profile_picture_base64','price', 'is_verified']
        read_only_fields = ['profile_picture_base64']


# üñºÔ∏è Artwork Serializer
class ArtworkSerializer(serializers.ModelSerializer):
    artist = ArtistSerializer(read_only=True)
    artist_id = serializers.PrimaryKeyRelatedField(
        queryset=Artist.objects.all(), source='artist', write_only=True
    )

    class Meta:
        model = Artwork
        fields = ['id', 'artist', 'artist_id', 'title', 'description', 'image', 'image_base64', 'price', 'date_created']
        read_only_fields = ['image_base64', 'date_created']


# üìÖ Event Serializer
class EventSerializer(serializers.ModelSerializer):
    category = CategorySerializer(read_only=True)
    category_id = serializers.PrimaryKeyRelatedField(
        queryset=Category.objects.all(), source='category', write_only=True
    )

    class Meta:
        model = Event
        fields = ['id', 'title', 'description', 'image', 'image_base64', 'location', 'latitude', 'longitude', 'date',
                  'created_at', 'category', 'category_id', 'status']
        read_only_fields = ['image_base64', 'created_at', 'status']


# üë• Event Organizer Serializer
class EventOrganizerSerializer(serializers.ModelSerializer):
    event = EventSerializer(read_only=True)
    event_id = serializers.PrimaryKeyRelatedField(
        queryset=Event.objects.all(), source='event', write_only=True
    )

    class Meta:
        model = EventOrganizer
        fields = ['id', 'event', 'event_id', 'name', 'logo', 'logo_base64', 'website', 'is_verified']
        read_only_fields = ['logo_base64']


# üéüÔ∏è Ticket Category Serializer
class TicketCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = TicketCategory
        fields = '__all__'


# üéüÔ∏è Ticket Type Serializer
class TicketTypeSerializer(serializers.ModelSerializer):
    event = EventSerializer(read_only=True)
    event_id = serializers.PrimaryKeyRelatedField(
        queryset=Event.objects.all(), source='event', write_only=True
    )
    category = TicketCategorySerializer(read_only=True)
    category_id = serializers.PrimaryKeyRelatedField(
        queryset=TicketCategory.objects.all(), source='category', write_only=True, allow_null=True
    )

    class Meta:
        model = TicketType
        fields = ['id', 'name', 'subtitle', 'price', 'discount_price', 'discount_until', 'event', 'event_id',
                  'description', 'category', 'category_id']

class TicketTypeSerializer(serializers.ModelSerializer):
    event_name = serializers.CharField(source='event.name', read_only=True)

    class Meta:
        model = TicketType
        fields = ['id', 'name', 'price', 'discount_price', 'discount_until', 'event', 'event_name']

# üìã Event Detail Serializer
class EventDetailSerializer(serializers.ModelSerializer):
    event = EventSerializer(read_only=True)
    event_id = serializers.PrimaryKeyRelatedField(
        queryset=Event.objects.all(), source='event', write_only=True
    )
    ticket_type = TicketTypeSerializer(read_only=True)
    ticket_type_id = serializers.PrimaryKeyRelatedField(
        queryset=TicketType.objects.all(), source='ticket_type', write_only=True, allow_null=True
    )

    class Meta:
        model = EventDetail
        fields = ['id', 'event', 'event_id', 'ticket_type', 'ticket_type_id', 'price', 'description']


# ‚≠ê Artist Review Serializer
class ArtistReviewSerializer(serializers.ModelSerializer):
    artist = ArtistSerializer(read_only=True)
    artist_id = serializers.PrimaryKeyRelatedField(
        queryset=Artist.objects.all(), source='artist', write_only=True
    )
    user = CustomUserSerializer(read_only=True)
    user_id = serializers.PrimaryKeyRelatedField(
        queryset=CustomUser.objects.all(), source='user', write_only=True
    )

    class Meta:
        model = ArtistReview
        fields = ['id', 'artist', 'artist_id', 'user', 'user_id', 'rating', 'comment']


# ‚≠ê Event Review Serializer
class EventReviewSerializer(serializers.ModelSerializer):
    class Meta:
        model = EventReview
        fields = ['id', 'event', 'user', 'rating', 'review_text', 'created_at']

class GenericReviewSerializer(serializers.ModelSerializer):
    class Meta:
        model = GenericReview
        fields = '__all__'

# üìù Register Serializer
class RegisterSerializer(serializers.ModelSerializer):
    password2 = serializers.CharField(write_only=True)

    class Meta:
        model = CustomUser
        fields = ('email', 'username', 'password', 'password2')
        extra_kwargs = {'password': {'write_only': True}}

    def validate(self, data):
        if data['password'] != data['password2']:
            raise serializers.ValidationError({"password": "–ù—É—É—Ü “Ø–≥ —Ö–æ–æ—Ä–æ–Ω–¥–æ–æ —Ç–∞–∞—Ä–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞"})
        return data

    def create(self, validated_data):
        validated_data.pop('password2')
        user = CustomUser.objects.create_user(**validated_data)
        return user


# üõ†Ô∏è Custom Token Serializer
class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    def validate(self, attrs):
        email = attrs.get('email')
        password = attrs.get('password')

        # Use custom authentication
        user = authenticate(request=self.context.get('request'), email=email, password=password)

        if not user:
            raise serializers.ValidationError("Invalid email or password.")

        data = super().validate(attrs)
        data['user_id'] = user.id  # You can add more data if needed
        return data


class MyTokenObtainPairView(TokenObtainPairView):
    serializer_class = MyTokenObtainPairSerializer


# üë§ Custom Auth Token Serializer
class CustomAuthTokenSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField(write_only=True)

    def validate(self, attrs):
        email = attrs.get('email')
        password = attrs.get('password')

        # Authenticate using email
        user = authenticate(request=self.context.get('request'), email=email, password=password)

        if not user:
            raise serializers.ValidationError("Invalid email or password.")

        attrs['user'] = user
        return attrs

class BookingSerializer(serializers.ModelSerializer):
    """
    Serializer for the Booking model.
    """
    # Frontend-—ç—ç—Å User-–∏–π–Ω ID —ç—Å–≤—ç–ª User object-–≥ —à—É—É–¥ —Ö“Ø–ª—ç—ç–∂ –∞–≤–∞—Ö–≥“Ø–π,
    # —Ö–∞—Ä–∏–Ω —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω User-–∏–π–≥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ö–æ–ª–±–æ–Ω–æ.
    # Artist-–∏–π–Ω ID-–≥ frontend-—ç—ç—Å —Ö“Ø–ª—ç—ç–∂ –∞–≤–Ω–∞.

    class Meta:
        model = Booking
        # API-–∞–∞—Ä –¥–∞–º–∂—É—É–ª–∞—Ö —Ç–∞–ª–±–∞—Ä—É—É–¥ –±–æ–ª–æ–Ω frontend-—ç—ç—Å —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö —Ç–∞–ª–±–∞—Ä—É—É–¥
        # 'user' —Ç–∞–ª–±–∞—Ä—ã–≥ Read Only –±–æ–ª–≥–æ–∂, create “Ø–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞.
        fields = [
            'id', # Booking-–∏–π–Ω ID (read-only)
            'user', # –ó–∞—Ö–∏–∞–ª–≥–∞ —Ö–∏–π—Å—ç–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á (read-only)
            'artist', # –ó–∞—Ö–∏–∞–ª–≥–∞ —Ö–∏–π–≥–¥—ç–∂ –±—É–π —É—Ä–∞–Ω –±“Ø—Ç—ç—ç–ª—á (frontend-—ç—ç—Å artist.id-–≥ –∏–ª–≥—ç—ç–Ω—ç)
            'booking_date', # –ó–∞—Ö–∏–∞–ª–≥—ã–Ω –æ–≥–Ω–æ–æ (frontend-—ç—ç—Å –∏–ª–≥—ç—ç–Ω—ç)
            'booking_time', # –ó–∞—Ö–∏–∞–ª–≥—ã–Ω —Ü–∞–≥ (frontend-—ç—ç—Å –∏–ª–≥—ç—ç–Ω—ç)
            'location', # –ë–∞–π—Ä—à–∏–ª (frontend-—ç—ç—Å –∏–ª–≥—ç—ç–Ω—ç)
            'duration_hours', # “Æ—Ä–≥—ç–ª–∂–ª—ç—Ö —Ö—É–≥–∞—Ü–∞–∞ (frontend-—ç—ç—Å –∏–ª–≥—ç–Ω—ç)
            'notes', # –ù—ç–º—ç–ª—Ç —Ç–∞–π–ª–±–∞—Ä (frontend-—ç—ç—Å –∏–ª–≥—ç–Ω—ç)
            'status', # –ó–∞—Ö–∏–∞–ª–≥—ã–Ω —Å—Ç–∞—Ç—É—Å (read-only, backend defaults to 'pending')
            'created_at', # “Æ“Ø—Å–≥—ç—Å—ç–Ω –æ–≥–Ω–æ–æ (read-only)
            'updated_at', # –®–∏–Ω—ç—á–∏–ª—Å—ç–Ω –æ–≥–Ω–æ–æ (read-only)
        ]
        # –ó”©–≤—Ö”©–Ω backend-—ç—ç—Å —É–Ω—à–∏—Ö –±–æ–ª–æ–º–∂—Ç–æ–π —Ç–∞–ª–±–∞—Ä—É—É–¥
        read_only_fields = ['id', 'user', 'status', 'created_at', 'updated_at']


    def create(self, validated_data):
        # –ó–∞—Ö–∏–∞–ª–≥–∞ “Ø“Ø—Å–≥—ç—Ö “Ø–µ–¥ —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ 'user' —Ç–∞–ª–±–∞—Ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –æ—Ä—É—É–ª–Ω–∞.
        # request object-–≥ serializer context-–¥ –¥–∞–º–∂—É—É–ª—Å–∞–Ω –±–∞–π—Ö —ë—Å—Ç–æ–π.
        user = self.context['request'].user
        # Backend-—ç—ç—Å Artist object-–≥ validated_data –¥–æ—Ç–æ—Ä Artist ID-—ç—ç—Ä –∞–≤–Ω–∞.
        # Frontend-—ç—ç—Å –∏—Ä—Å—ç–Ω artist ID-–≥ –º–æ–¥–µ–ª object –±–æ–ª–≥–æ–Ω —Ö—É–≤–∏—Ä–≥–∞–Ω–∞.
        # 'artist' —Ç–∞–ª–±–∞—Ä ModelSerializer-—Ç –∑”©–≤ —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥—Å–∞–Ω –±–æ–ª Django REST Framework ”©”©—Ä”©”© “Ø“Ø–Ω–∏–π–≥ —Ö–∏–π–¥—ç–≥.

        booking = Booking.objects.create(user=user, **validated_data)
        return booking
    
class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser # CustomUser –º–æ–¥–µ–ª—Ç–æ–π –∞–∂–∏–ª–ª–∞–Ω–∞
        # –ü—Ä–æ—Ñ–∞–π–ª –¥—ç—ç—Ä —Ö–∞—Ä—É—É–ª–∞—Ö –±–æ–ª–æ–Ω —à–∏–Ω—ç—á–ª—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π —Ç–∞–ª–±–∞—Ä—É—É–¥
        # –¢–∞–Ω—ã CustomUser –º–æ–¥–µ–ª–∏–π–Ω —Ç–∞–ª–±–∞—Ä—É—É–¥—ã–≥ –æ—Ä—É—É–ª–Ω–∞.
        # first_name, last_name AbstractBaseUser –¥—ç—ç—Ä –±–∞–π–¥–∞–≥ —Ç–∞–ª–±–∞—Ä—É—É–¥ —é–º.
        fields = ('id', 'username', 'email', 'phone_number')
        # –ó”©–≤—Ö”©–Ω —É–Ω—à–∏—Ö –±–æ–ª–æ–º–∂—Ç–æ–π —Ç–∞–ª–±–∞—Ä—É—É–¥
        read_only_fields = ('id', 'username') # –ñ–∏—à—ç—ç –Ω—å, username-–≥ —à–∏–Ω—ç—á–ª—ç—Ö–∏–π–≥ —Ö–æ—Ä–∏–≥–ª–æ–∂ –±–æ–ª–Ω–æ.
